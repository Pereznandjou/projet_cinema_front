{"ast":null,"code":"import { catchError, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FilmService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/film'; // Remplacez ceci par l'URL de votre API NestJS\n  }\n  // getPokemonList(): Observable<Film[]> {\n  //   return this.http.get<Film[]>('api/pokemons').pipe(\n  //     tap((response) => this.log(response)),\n  //     catchError((error) => this.handleError(error, [])\n  //     ))\n  //     ;\n  // }\n  getFilmsList() {\n    return this.http.get(this.apiUrl).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, [])));\n  }\n  addFilm(newFilm) {\n    return this.http.post(this.apiUrl, newFilm);\n  }\n  updateFilm(updatedFilm) {\n    const url = `${this.apiUrl}/${updatedFilm.id}`;\n    return this.http.put(url, updatedFilm);\n  }\n  deleteFilm(filmId) {\n    const url = `${this.apiUrl}/${filmId}`;\n    return this.http.delete(url);\n  }\n  log(response) {\n    console.table(response);\n  }\n  handleError(error, errorValue) {\n    console.error(error);\n    return of(errorValue);\n  }\n  getPokemonTypeList() {\n    return ['Action', 'Drame', 'Aventure', 'Comédie', 'Horreur', 'Science-Fiction', 'Fantaisie', 'Mystère', 'Romance', 'Thriller', 'Documentaire'];\n  }\n  static #_ = this.ɵfac = function FilmService_Factory(t) {\n    return new (t || FilmService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FilmService,\n    factory: FilmService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","of","tap","FilmService","constructor","http","apiUrl","getFilmsList","get","pipe","response","log","error","handleError","addFilm","newFilm","post","updateFilm","updatedFilm","url","id","put","deleteFilm","filmId","delete","console","table","errorValue","getPokemonTypeList","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\ESTIAM-2023-2024\\fullStack_BACK\\projet cinema\\projet-cinema-front\\src\\app\\film.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, of, tap } from 'rxjs';\nimport { Film } from './film';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilmService {\n  private apiUrl = 'http://localhost:3000/film'; // Remplacez ceci par l'URL de votre API NestJS\n\n\n  constructor(private http: HttpClient) { }\n\n  // getPokemonList(): Observable<Film[]> {\n  //   return this.http.get<Film[]>('api/pokemons').pipe(\n  //     tap((response) => this.log(response)),\n  //     catchError((error) => this.handleError(error, [])\n  //     ))\n  //     ;\n\n  // }\n\n  getFilmsList(): Observable<Film[]> {\n    return this.http.get<Film[]>(this.apiUrl).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.handleError(error, [])\n      ));\n  }\n\n  addFilm(newFilm: Film): Observable<Film> {\n    return this.http.post<Film>(this.apiUrl, newFilm);\n  }\n\n  updateFilm(updatedFilm: Film): Observable<Film> {\n    const url = `${this.apiUrl}/${updatedFilm.id}`;\n    return this.http.put<Film>(url, updatedFilm);\n  }\n\n  deleteFilm(filmId: number): Observable<void> {\n    const url = `${this.apiUrl}/${filmId}`;\n    return this.http.delete<void>(url);\n  }\n\n  private log(response: Film[] | Film | undefined | any) {\n    console.table(response);\n  }\n  private handleError(error: Error, errorValue: any) {\n    console.error(error);\n    return of(errorValue);\n  }\n\n  getPokemonTypeList(): string[] {\n    return [\n      'Action',\n      'Drame',\n      'Aventure',\n      'Comédie',\n      'Horreur',\n      'Science-Fiction',\n      'Fantaisie',\n      'Mystère',\n      'Romance',\n      'Thriller',\n      'Documentaire'\n    ];\n  }\n\n}\n"],"mappings":"AAEA,SAASA,UAAU,EAAcC,EAAE,EAAEC,GAAG,QAAQ,MAAM;;;AAMtD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,4BAA4B,CAAC,CAAC;EAGP;EAExC;EACA;EACA;EACA;EACA;EACA;EAEA;EAEAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CAC5CP,GAAG,CAAEQ,QAAQ,IAAK,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAC,CAAC,EACrCV,UAAU,CAAEY,KAAK,IAAK,IAAI,CAACC,WAAW,CAACD,KAAK,EAAE,EAAE,CAAC,CAChD,CAAC;EACN;EAEAE,OAAOA,CAACC,OAAa;IACnB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAO,IAAI,CAACV,MAAM,EAAES,OAAO,CAAC;EACnD;EAEAE,UAAUA,CAACC,WAAiB;IAC1B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACb,MAAM,IAAIY,WAAW,CAACE,EAAE,EAAE;IAC9C,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAOF,GAAG,EAAED,WAAW,CAAC;EAC9C;EAEAI,UAAUA,CAACC,MAAc;IACvB,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACb,MAAM,IAAIiB,MAAM,EAAE;IACtC,OAAO,IAAI,CAAClB,IAAI,CAACmB,MAAM,CAAOL,GAAG,CAAC;EACpC;EAEQR,GAAGA,CAACD,QAAyC;IACnDe,OAAO,CAACC,KAAK,CAAChB,QAAQ,CAAC;EACzB;EACQG,WAAWA,CAACD,KAAY,EAAEe,UAAe;IAC/CF,OAAO,CAACb,KAAK,CAACA,KAAK,CAAC;IACpB,OAAOX,EAAE,CAAC0B,UAAU,CAAC;EACvB;EAEAC,kBAAkBA,CAAA;IAChB,OAAO,CACL,QAAQ,EACR,OAAO,EACP,UAAU,EACV,SAAS,EACT,SAAS,EACT,iBAAiB,EACjB,WAAW,EACX,SAAS,EACT,SAAS,EACT,UAAU,EACV,cAAc,CACf;EACH;EAAC,QAAAC,CAAA,G;qBA1DU1B,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX/B,WAAW;IAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}